/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <memory.h> /* for memset */
#include "oauth.h"

/* Default timeout can be changed using clnt_control() */
static struct timeval TIMEOUT = { 25, 0 };

AuthResponse *
requestauthorization_1(AuthRequest arg1,  CLIENT *clnt)
{
	static AuthResponse clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, RequestAuthorization,
		(xdrproc_t) xdr_AuthRequest, (caddr_t) &arg1,
		(xdrproc_t) xdr_AuthResponse, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

AccessTokenResponse *
requestaccesstoken_1(AccessTokenRequest arg1,  CLIENT *clnt)
{
	static AccessTokenResponse clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, RequestAccessToken,
		(xdrproc_t) xdr_AccessTokenRequest, (caddr_t) &arg1,
		(xdrproc_t) xdr_AccessTokenResponse, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

AccessTokenResponse *
refreshaccesstoken_1(RefreshTokenRequest arg1,  CLIENT *clnt)
{
	static AccessTokenResponse clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, RefreshAccessToken,
		(xdrproc_t) xdr_RefreshTokenRequest, (caddr_t) &arg1,
		(xdrproc_t) xdr_AccessTokenResponse, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

ValidateActionResponse *
validateaction_1(ValidateActionRequest arg1,  CLIENT *clnt)
{
	static ValidateActionResponse clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, ValidateAction,
		(xdrproc_t) xdr_ValidateActionRequest, (caddr_t) &arg1,
		(xdrproc_t) xdr_ValidateActionResponse, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return (&clnt_res);
}

void *
approverequest_1(ApproveRequestToken arg1,  CLIENT *clnt)
{
	static char clnt_res;

	memset((char *)&clnt_res, 0, sizeof(clnt_res));
	if (clnt_call (clnt, ApproveRequest,
		(xdrproc_t) xdr_ApproveRequestToken, (caddr_t) &arg1,
		(xdrproc_t) xdr_void, (caddr_t) &clnt_res,
		TIMEOUT) != RPC_SUCCESS) {
		return (NULL);
	}
	return ((void *)&clnt_res);
}
